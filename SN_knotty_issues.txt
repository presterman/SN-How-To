//How to grant security admin to an admin.

1.Log in as admin
2.Click on your name in the top-right corner
3.Select Elevate Roles
4.Choose security_admin and click OK
5.Then assign the security_admin role to the new User

//---------------------------------------------

//JavaScript - a way to duplicate any GlideRecord.

//query the rows we want to copy
var ga = new GlideRecord('cmdb_ci_server');
ga.query();

while (ga.next()) {
    //get all the fields for this record
    var fields = ga.getFields();
    //create a new record
    var gr = new GlideRecord('cmdb_ci_server');
    gr.initialize();
    for (var i = 0; i < fields.size(); i++) {
        var glideElement = fields.get(i);
        //make sure we don't copy the sys_id
        if(glideElement.getName() != 'sys_id')
        {
            gr[key] = ga.getValue(glideElement.getName());                  
        }
    }
    var newSysId = gr.insert();
};

//------------------------------------------------
//Javascript copy pattern from a list, using the first check list item as the model
function ShowMe()
{
var v = g_list.getChecked();
//var a = new Array();
var a=[];
a = v.split(",");
var start_int=0; 
var seq=0;	
var prefix='';	
for (var i=0; i<a.length; i++)
 {
	 var gr= new GlideRecord('sys_user');
	 gr.addQuery('sys_id',a[i]);
	 gr.query();
	 while (gr.next())
		 {
			
			if(i==0) //the first one selected is the model, the rest follow the model but increment the last three numbers for each                          // checked item
				{
				 var phone1= gr.getValue('phone');
				 prefix=phone1.substring(0,phone1.length-3);	//get all chars except last three
				 var start_num=phone1.substring(phone1.length-3); //get the last 3, these are the numeric chars. to be incremented		
				 start_int=parseInt(start_num);	//make the start_num numeric
				}
			seq=start_int+i; 
			gr.phone=prefix + seq; 
			gr.update(); 
		 }
	 
 }
g_list.refresh();	//refresh the list in the browser window with the new values

}

-----------------------------------------
//Javascript Get fields, type and max length from a table
var t= new GlideRecord("sys_dictionary");
t.addQuery("name", "table name");
t.query()
while (t.next())
{

    gs.log( t.element + " " + t.internal_type + " " + t.max_length)  
}

-----------------------------------------------
//Change a label on a form dynamically
onLoad() {
   //Change the description label to 'My New Label' with bold red text
   changeFieldLabel('u_subtype', 'Request Subtype', 'black', 'normal');
}

function changeFieldLabel(field, label, color, weight){
   try{
      var labelElement = $('label.' +  g_form.getControl(field).id);
      labelElement.select('.label-text').each(function(elmt) {
         elmt.innerHTML = label + '';
         if(color)
            elmt.style.color = color;
         if(weight)
            elmt.style.fontWeight = weight;
      });
   }catch(e){}
   
   ----------------------------------------------------------
   //Filling the selected side of a list box from javascript, refreshing the selected items - moving them back to the unselected box and so on..
   

var varName = 'cat_list';
var leftBucket = gel(varName + '_select_0');
var rightBucket = gel(varName + '_select_1');
var selectedOptions = leftBucket.options;	
var defaultOptions=[];		
var selectedIDs=[];	
var rightToleftIDs=[];	
var j = 0;	
var index = 0;

//Move any left bucket items back to the right bucket full list	
	
 for(j=0;j < rightBucket.options.length; j++)
			   {
				  if(rightBucket.options[j].value!='')
					  {
				         rightToleftIDs.push(j);
						  
					  }
				   
			   }
	

moveSelectedOptions(rightToleftIDs, rightBucket, leftBucket, '--None--');	
sortSelect(leftBucket);	

//Capture the default options for  the selection
	var cr= new GlideRecord('u_complex_requests');
	cr.addQuery('u_complex_request',newValue);
	cr.query();
	while (cr.next())
		{
			
			defaultOptions.push(cr.u_cat_item);
			
		}
	
//Find the index in the right bucket that corresponds to the defaults
for(var i = 0; i < selectedOptions.length; i++)
{

	for(j=0;j<defaultOptions.length;j++)
		{
			
			if(selectedOptions[i].value==defaultOptions[j])
				{
					
					 selectedIDs[index] = i;
					 index++;
					 break;
				}
	}
  
}	
		
//set it to 0 options	
rightBucket.options.length=0;	
//Move the defaults back to the right bucket	
moveSelectedOptions(selectedIDs, leftBucket, rightBucket, '--None--');
//Sort the right bucket
sortSelect(rightBucket);


   -------------------------------------------
   
    //Compare dates - ensuring that one is before the other etc.
   //get today's date	
  var currentDateObj = new Date(); 
  var currentDateStr = formatDate(currentDateObj, g_user_date_format); 
  var currentDateNum = getDateFromFormat(currentDateStr, g_user_date_format); //returns milliseconds
	
  var myDueDateStr=newValue.toString();	//newValue here is the value from a datetime field like due_date
	 //get the Date part of Due Date
      myDueDateStr=myDueDateStr.substring(0,10);	
  var dueDateNum = getDateFromFormat(myDueDateStr, g_user_date_format); //milliseconds also
         
	//Compares the times milliseconds-millliseconds
    if (dueDateNum < currentDateNum) { 
	g_form.addErrorMessage('The Due date cannot be set or changed to a date before Today!');	
	  alert('The Due date cannot be set or changed to a date before Today');
	  g_form.setValue('due_date','');	
     
	}
	
   
   
   

